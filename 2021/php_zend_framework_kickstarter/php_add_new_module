#!/bin/env php
<?php
/**
 * Simple script to automate the creation of a new zend framework module
 *
 * @todo
 *   move code into functions
 *   add userinput
 *   automate the manual steps at the end
 *
 * @since 2018-10-11
 * @author stev leibelt <artodeto@bazzline.net>
 */

$currentDate                = date('Y-m-d');
$currentVersion             = '0.1.0';
$currentWorkingDirectory    = pwd();
$nameOfThisScript           = basename(__FILE__);
$pathOfTheThisScript        = __DIR__;

function printUsageAndExit()
{
    echo ':: Invalid amount of arguments supplied.' . PHP_EOL
    echo '   Usage: ' . $nameOfThisScript . ' <module name> [<application path>]' . PHP_EOL;
    echo PHP_EOL;

    exit 1;
}

if ($arc < 2) {
    printUsageAndExit();
}

$moduleName=$argv[1];
$pathToTheApplication=(
    $argc > 2
    ? $argv[2]
    : '.'
);

$moduleNameAsLowerCase = strtolower($moduleName);

if (!is_dir($pathToTheApplication . ' /module')) {
    echo ':: No module path found!' . PHP_EOL;
    echo '   Can not create new module' . PHP_EOL;
    echo PHP_EOL;

    exit 2;
}

$pathToTheNewModule = $pathToTheApplication . '/module/' . $moduleName;

if (is_dir($pathToTheNewModule)) {
    echo ':: Module with the name >>${MODULE_NAME}<< exists already!' . PHP_EOL;
    echo PHP_EOL;

    exit 3;
}

echo ':: Creating directories.' . PHP_EOL;

$listOfDirectoryPath = [
    $pathToTheNewModule,
    $pathToTheNewModule . '/config',
    $pathToTheNewModule . '/src/Controller',
    $pathToTheNewModule . '/src/Model',
    $pathToTheNewModule . '/src/Service',
    $pathToTheNewModule . '/test/phpunit/Model',
    $pathToTheNewModule . '/test/phpunit/Service'
];

foreach ($listOfDirectoryPath as $directoryPath) {
    mkdir(
        $directoryPath,
        true,
        0755
    );
}

echo ':: Creating files.' . PHP_EOL;

$listOfFilePath = [
    $pathToTheNewModule . '/README.md',
    $pathToTheNewModule . '/phpunit.xml',
    $pathToTheNewModule . '/src/Module.php',
    $pathToTheNewModule . '/config/module.config.php',
    $pathToTheNewModule . '/config/' . $moduleNameAsLowerCase . '.config.php',
    $pathToTheNewModule . '/config/routes.config.php',
    $pathToTheNewModule . '/test/phpunit/bootstrap.php'
];

file_put_contents(
    $pathToTheApplication . '/README.md',
    '# ' . $moduleName . ' Domain

'
);

file_put_contents(
    $pathToTheNewModule . 'phpunit.xml',
    '<phpunit
    bootstrap="test/phpunit/bootstrap.php"
    colors="true"
    backupGlobals="true"
    convertErrorsToExceptions="true"
    convertNoticesToExceptions="true"
    convertWarningsToExceptions="true"
    stopOnFailure="false">

    <php>
        <server name=\'HTTP_HOST\' value=\'http://localhost\' />
        <server name=\'SERVER_NAME\' value=\'http://localhost\' />
        <server name=\'SERVER_PORT\' value=\'80\'/>
    </php>

    <testsuites>
        <testsuite name=\'' . $moduleName . '\' Test Suite">
            <directory>./test/phpunit</directory>
        </testsuite>
    </testsuites>
</phpunit>'
);
####magic line of todo####
cat > src/Controller/Console/AbstractConsoleController.php <<DELIM
<?php
/**
 * @author ${NAME_OF_THE_CURRENT_SCRIPT}/${CURREMT_VERSION}
 * @since ${CURRENT_DATE}
 */

namespace Application\Controller\Console;

use Throwable;
use Zend\Console\Adapter\AdapterInterface;
use Zend\Console\ColorInterface;
use Zend\Console\Request;
use Zend\Console\Response;
use Zend\Mvc\Controller\AbstractActionController;

abstract class AbstractConsoleController extends AbstractActionController
{
    const EXIT_CODE_OF_GENERAL_ERROR    = 1;

    /**
     * @return \Zend\Stdlib\RequestInterface|Request
     */
    public function getRequest()
    {
        return parent::getRequest(); // TODO: Change the autogenerated stub
    }

    protected function handleThrowable(
        AdapterInterface \$console,
        Throwable \$throwable,
        Response \$response = null
    ): Response {
        \$console->writeLine(
            ':: Throwable class.' . PHP_EOL,
            ColorInterface::RED
        );
        \$console->writeLine(
            '   ' . get_class(\$throwable),
            ColorInterface::RESET
        );

        \$console->writeLine(
            ':: Throwable message.' . PHP_EOL,
            ColorInterface::RED
        );
        \$console->writeLine(
            '   ' . \$throwable->getMessage(),
            ColorInterface::RESET
        );

        \$console->writeLine(
            ':: Throwable trace.' . PHP_EOL,
            ColorInterface::RED
        );
        \$console->writeLine(
            '   ' . \$throwable->getTraceAsString(),
            ColorInterface::RESET
        );

        if (is_null(\$response)) {
            \$response = new Response();
        }

        \$response->setErrorLevel(
            self::EXIT_CODE_OF_GENERAL_ERROR;
        );

        return \$response;
    }

    protected function isBooleanParameterSet(
        string \$shortName = null,
        string \$longName = null
    ): bool {
        \$request = \$this->getRequest();

        if (!is_null(\$shortName)) {
            \$short = \$request->getParam(\$shortName);
        } else {
            \$short = null;
        }

        if (!is_null(\$longName)) {
            \$long   = \$request->getParam(\$longName);
        } else {
            \$long = null;
        }

        \$isSet  = (
            (
                (!is_null(\$long))
                && (\$long === true)
            )
            || (
                (!is_null(\$short))
                && (\$short === true)
            )
        );

        return \$isSet;
    }



    /**
     * @return bool
     */
    protected function beVerbose()
    {
        return \$this->isBooleanParameterSet(
            'v',
            'verbose'
        );
    }


    protected function writeLineOnlyIfVerbosityIsEnabled(
        string \$line,
        AdapterInterface \$adapter,
        bool \$beVerbose
    ) {
        if (\$beVerbose) {
            \$adapter->writeLine(\$line);
        }
    }
}
DELIM

cat > src/Module.php <<DELIM
<?php
/**
 * @author ${NAME_OF_THE_CURRENT_SCRIPT}/${CURREMT_VERSION}
 * @since ${CURRENT_DATE}
 */

namespace ${MODULE_NAME};

use Zend\Console\Adapter\AdapterInterface as Console;
use Zend\ModuleManager\Feature\ConfigProviderInterface;
use Zend\ModuleManager\Feature\ConsoleUsageProviderInterface;
use Zend\Stdlib\Glob;
use Zend\Stdlib\ArrayUtils;

/**
 * Class Module
 * @see:
 *  https://docs.zendframework.com/zend-modulemanager/
 *  https://framework.zend.com/manual/2.4/en/tutorials/config.advanced.html#module-configuration
 */
class Module implements ConfigProviderInterface, ConsoleUsageProviderInterface
{
    //begin of ConfigProviderInterface
    /**
     * @return array
     * @throws \Zend\Stdlib\Exception\RuntimeException
     */
    public function getConfig() : array
    {
        \$configuration = [];

        foreach (Glob::glob(__DIR__ . '/../config/{,*.}config.php', Glob::GLOB_BRACE) as \$file) {
            \$fileContent = include \$file;
            \$fileArray = is_array(\$fileContent) ? \$fileContent : [];
            \$configuration = ArrayUtils::merge(\$configuration, \$fileArray);
        }

        return \$configuration;
    }
    //end of ConfigProviderInterface

    //begin of ConsoleUsageProviderInterface
    /**
     * @param Console \$console
     * @return array
     */
    public function getConsoleUsage(Console \$console) : array
    {
        return [
            //alphabetically order!
        ];
    }
    //end of ConsoleUsageProviderInterface
}
DELIM

cat > config/module.config.php <<DELIM
<?php
/**
 * @author ${NAME_OF_THE_CURRENT_SCRIPT}/${CURREMT_VERSION}
 * @since ${CURRENT_DATE}
 */

return [
    //begin of zend framework configuration section
    'controllers' => [
        'factories' => [
            //console
            //http
        ]
    ],
    'service_manager' => [
        'invokables' => [
        ],
        'factories' => [
        ]
    ],
    'view_manager' => [
        'template_map' => [
        ],
        'template_path_stack' => [
            __DIR__ . '/../views',
            __DIR__ . '/../views/partials'
        ]
    ],
    'view_helpers' => [
        'invokables' => [
        ],
        'factories' => [
        ],
    ]
    //end of zend framework configuration section
];
DELIM

cat > "config/${MODULE_NAME_AS_LOWER_CASE}.config.php" <<DELIM
<?php
/**
 * @author ${NAME_OF_THE_CURRENT_SCRIPT}/${CURREMT_VERSION}
 * @since ${CURRENT_DATE}
 */

return [
    //begin of module configuration section
    '${MODULE_NAME_AS_LOWER_CASE}' => [
    ]
    //end of module configuration section
];
DELIM

cat > config/routes.config.php <<DELIM
<?php
/**
 * @author ${NAME_OF_THE_CURRENT_SCRIPT}/${CURREMT_VERSION}
 * @since ${CURRENT_DATE}
 */

return [
    //http routes
    'router' => [
        'routes' => [
                //'${MODULE_NAME_AS_LOWER_CASE}_http_route_name'   => [
                //  'options'   => [
                //      'defaults'  => [
                //          'action'        => 'methodNameWithoutSuffixAction',
                //          'controller'    => \\${MODULE_NAME}\Controller\Console\MyFancyController::class,
                //          'module'        => '${MODULE_NAME}'
                //      ],
                //      'route' => '{/foo-bar}/:id'
                //  ],
                //  'type'  => \Zend\Router\Http\Segment::class
                //]
        ],
    ],
    //console routes
    'console' => [
        'router' => [
            'routes' => [
                //'${MODULE_NAME_AS_LOWER_CASE}_console_route_name'   => [
                //  'options'   => [
                //      'defaults'  => [
                //          'action'        => 'methodNameWithoutSuffixAction',
                //          'controller'    => \\${MODULE_NAME}\Controller\Console\MyFancyController::class
                //      ],
                //      'route' => '${MODULE_NAME_AS_LOWER_CASE} my-console-command [--verbose|-v]
                //  ]
                //]
            ]
        ]
    ]
];
DELIM

cat > test/phpunit/bootstrap.php <<DELIM
<?php
/**
 * @author ${NAME_OF_THE_CURRENT_SCRIPT}/${CURREMT_VERSION}
 * @since ${CURRENT_DATE}
 */

\$basePath = realpath(__DIR__ . '/../../../../');
putenv('SYSTEM_ENVIRONMENT=unittest');
date_default_timezone_set('Europe/Berlin');

//setup autoloader
require_once \$basePath . '/../vendor/autoload.php';
DELIM

echo ":: Attantion!"
echo "   Please adapt the the file \"application.config.php\" in the path \"${PATH_TO_THE_APPLICATION}/config\"."
echo "   You have to add '${MODULE_NAME}' inside the declaration of \$module."
echo ""

echo "   Please adapt the file \"composer.json\" in the path \"${PATH_TO_THE_APPLICATION}\"."
echo "   You have to add '\"${MODULE_NAME}\\\\\": \"module/${MODULE_NAME}/src/\",' in the PSR-4 section."
echo "   Execute \"ant composer_install_development\" in the path \"${PATH_TO_THE_APPLICATION}\"."

cd "${CURRENT_WORKING_DIRECTORY}"
