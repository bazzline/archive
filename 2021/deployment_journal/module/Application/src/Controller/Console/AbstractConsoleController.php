<?php
/**
 * @author stev leibelt <artodeto@bazzline.net>
 * @since 2018-09-15
 */

namespace Application\Controller\Console;

use Throwable;
use Zend\Console\Adapter\AdapterInterface;
use Zend\Console\ColorInterface;
use Zend\Console\Request;
use Zend\Console\Response;
use Zend\Mvc\Controller\AbstractActionController;

abstract class AbstractConsoleController extends AbstractActionController
{
    /**
     * @return \Zend\Stdlib\RequestInterface|Request
     */
    public function getRequest()
    {
        return parent::getRequest(); // TODO: Change the autogenerated stub
    }

    protected function handleThrowable(
        AdapterInterface $console,
        Throwable $throwable,
        Response $response = null
    ): Response {
        $console->writeLine(
            ':: Throwable class.' . PHP_EOL,
            ColorInterface::RED
        );
        $console->writeLine(
            '   ' . get_class($throwable),
            ColorInterface::RESET
        );

        $console->writeLine(
            ':: Throwable message.' . PHP_EOL,
            ColorInterface::RED
        );
        $console->writeLine(
            '   ' . $throwable->getMessage(),
            ColorInterface::RESET
        );

        $console->writeLine(
            ':: Throwable trace.' . PHP_EOL,
            ColorInterface::RED
        );
        $console->writeLine(
            '   ' . $throwable->getTraceAsString(),
            ColorInterface::RESET
        );

        if (is_null($response)) {
            $response = new Response();
        }

        $response->setErrorLevel(1);

        return $response;
    }

    protected function isBooleanParameterSet(
        string $shortName = null,
        string $longName = null
    ): bool {
        $request = $this->getRequest();

        if (!is_null($shortName)) {
            $short = $request->getParam($shortName);
        } else {
            $short = null;
        }

        if (!is_null($longName)) {
            $long   = $request->getParam($longName);
        } else {
            $long = null;
        }

        $isSet  = (
            (
                (!is_null($long))
                && ($long === true)
            )
            || (
                (!is_null($short))
                && ($short === true)
            )
        );

        return $isSet;
    }



    /**
     * @return bool
     */
    protected function beVerbose()
    {
        return $this->isBooleanParameterSet(
            'v',
            'verbose'
        );
    }


    protected function writeLineOnlyIfVerbosityIsEnabled(
        string $line,
        AdapterInterface $adapter,
        bool $beVerbose
    ) {
        if ($beVerbose) {
            $adapter->writeLine($line);
        }
    }
}